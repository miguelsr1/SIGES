project:
    version: desarrollo
    stage: desarrollo
logger:
    level: DEBUG
java:
    net:
        preferIPv4Stack: true
files:
    tmp:
        path: "/tempmedia/"
    media:
        path: "/media/"
    lucene:
        path: "/media/lucene/indexes"
cache:
    catalogo:
        defaultExpiryMinutes: 1
mp:
    openapi:
        scan:
            disable: true
external-api:
    max-results: 50
hibernate:
    show_sql: true
email-valid-pattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
thorntail:
    logging:
     loggers:
      org.hibernate.type.descriptor.sql.BasicBinder:
        level: TRACE
    port:
        offset: 0
    datasources:
        jdbc-drivers:
          org.postgresql:
            driver-class-name: org.postgresql.Driver
            xa-datasource-class-name: org.postgresql.xa.PGXADataSource
            driver-module-name: org.postgresql
        data-sources:
          SigesDS:
            driver-name: org.postgresql
            connection-url: jdbc:postgresql://167.229.0.2:5432/siges
            user-name: postgres
            password: changeme
            jta: true
            use-java-context: true 
            pool-prefill: true
            connection-checker-class-name: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker
            background-validation: true
            exception-sorter-class-name: org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter
    microprofile:
        jwtauth:
          token:
            issuedBy: "SIGES"
#    microprofile:
#        jwt:
#            token:
#                signer-pub-key: "file:publicKey.pem"
    security:
        security-domains:
          jwt-jaspi:
            jaspi-authentication:
              login-module-stacks:
                roles-lm-stack:
                  login-modules:
                    # This stack performs the token verification and group to role mapping
                    - login-module: rm
                      code: org.wildfly.swarm.microprofile.jwtauth.deployment.auth.jaas.JWTLoginModule
                      flag: required
              auth-modules:
              # This module integrates the MP-JWT custom authentication mechanism into the web container
                http:
                  code: org.wildfly.extension.undertow.security.jaspi.modules.HTTPSchemeServerAuthModule
                  module: org.wildfly.extension.undertow
                  flag: required
                  login-module-stack-ref: roles-lm-stack